<alaqilxml:alaqil name="namespaces" xmlns:alaqilxml="http://jniplusplus.sourceforge.net" xmlns:alaqil="http://alaqil.sourceforge.net" xmlns:c="http://www.ansi.org" >
  <alaqil:top >
    <alaqilxml:child >
      <alaqil:file name="../../Lib/alaqil.swg" >
        <alaqilxml:type string="include"  />
      </alaqil:file>
      <alaqil:file name="example_xml.i" >
        <alaqilxml:child >
          <alaqil:module name="my_example"  />
          <c:enum name="color" >
            <alaqilxml:child >
              <c:enumvalue name="RED" >
                <alaqilxml:value string="RED"  />
              </c:enumvalue>
              <c:enumvalue name="BLUE"  />
              <c:enumvalue name="GREEN"  />
            </alaqilxml:child>
          </c:enum>
          <c:class name="Foo" >
            <alaqilxml:child >
              <c:access name="public"  />
              <c:function name="Foo" >
                <alaqilxml:code >
{ }                </alaqilxml:code>
                <alaqilxml:type string="int"  />
              </c:function>
              <c:enum name="speed" >
                <alaqilxml:child >
                  <c:enumvalue name="IMPULSE"  />
                  <c:enumvalue name="WARP"  />
                  <c:enumvalue name="LUDICROUS"  />
                </alaqilxml:child>
              </c:enum>
              <c:function name="enum_test" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="s" >
                    <alaqilxml:type string="speed"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:type string="void"  />
              </c:function>
            </alaqilxml:child>
            <alaqilxml:classtype string="class"  />
            <alaqilxml:namespace string="Foo"  />
          </c:class>
          <c:function name="enum_test" >
            <alaqilxml:parms >
              <alaqilxml:parm name="c" >
                <alaqilxml:type string="color"  />
              </alaqilxml:parm>
              <alaqilxml:parm name="s" >
                <alaqilxml:type string="Foo::speed"  />
              </alaqilxml:parm>
            </alaqilxml:parms>
            <alaqilxml:type string="void"  />
          </c:function>
          <alaqil:file name="../../Lib/pointer.i" >
            <alaqilxml:child >
              <alaqil:module name="pointer"  />
              <alaqil:insert >
                <alaqilxml:code >

%include pointer.i

The pointer.i library provides run-time support for managing and 
manipulating a variety of C/C++ pointer values.  In particular,
you can create various kinds of objects and dereference common
pointer types.  This is done through a common set of functions:

    ptrvalue     - Dereferences a pointer 
    ptrset       - Set the value of an object referenced by 
                   a pointer.
    ptrcreate    - Create a new object and return a pointer.
    ptrfree      - Free the memory allocated by ptrcreate.
    ptradd       - Increment/decrement a pointer value.

When creating, dereferencing, or setting the value of pointer
variable, only the common C datatypes of int, short, long, float,
double, char, and char * are currently supported.   Other
datatypes may generate an error.

One of the more interesting aspects of this library is that
it operates with a wide range of datatypes.  For example,
the "ptrvalue" function can dereference "double *", "int *",
"long *", "char *", and other datatypes. Since alaqil encodes
pointers with type information, this can be done transparently
and in most cases, you can dereference a pointer without
ever knowing what type it actually is.

This library is primarily designed for utility, not high 
performance (the dynamic determination of pointer types takes
more work than most normal wrapper functions).  As a result,
you may achieve better performance by writing customized
"helper" functions if you're making lots of calls to these
functions in inner loops or other intensive operations.
                </alaqilxml:code>
                <alaqilxml:section string="doc"  />
              </alaqil:insert>
              <alaqil:types >
                <alaqilxml:parms >
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.int"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.short"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.long"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.float"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.double"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.char"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.p.char"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm >
                    <alaqilxml:type string="p.void"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
              </alaqil:types>
              <alaqil:file name="../../Lib/xml/ptrlang.i" >
                <alaqilxml:child >
                  <alaqil:insert >
                    <alaqilxml:code >

#include &amp;lt;ctype.h>

/* Types used by the library */
static alaqil_type_info *alaqil_POINTER_int_p = 0;
static alaqil_type_info *alaqil_POINTER_short_p =0;
static alaqil_type_info *alaqil_POINTER_long_p = 0;
static alaqil_type_info *alaqil_POINTER_float_p = 0;
static alaqil_type_info *alaqil_POINTER_double_p = 0;
static alaqil_type_info *alaqil_POINTER_char_p = 0;
static alaqil_type_info *alaqil_POINTER_char_pp = 0;
static alaqil_type_info *alaqil_POINTER_void_p = 0;
                    </alaqilxml:code>
                  </alaqil:insert>
                  <alaqil:insert >
                    <alaqilxml:code >

  alaqil_POINTER_int_p = alaqil_TypeQuery("int *");
  alaqil_POINTER_short_p = alaqil_TypeQuery("short *");
  alaqil_POINTER_long_p = alaqil_TypeQuery("long *");
  alaqil_POINTER_float_p = alaqil_TypeQuery("float *");
  alaqil_POINTER_double_p = alaqil_TypeQuery("double *");
  alaqil_POINTER_char_p = alaqil_TypeQuery("char *");
  alaqil_POINTER_char_pp = alaqil_TypeQuery("char **");
  alaqil_POINTER_void_p = alaqil_TypeQuery("void *");
                    </alaqilxml:code>
                    <alaqilxml:section string="init"  />
                  </alaqil:insert>
                  <alaqil:insert >
                    <alaqilxml:code >


/* #ifdef WIN32
#undef isspace
#define isspace(c) (c == ' ')
#endif
*/

/*------------------------------------------------------------------
  ptrvalue(ptr,type = 0)

  Attempts to dereference a pointer value.  If type is given, it
  will try to use that type.  Otherwise, this function will attempt
  to "guess" the proper datatype by checking against all of the
  builtin C datatypes.
  ------------------------------------------------------------------ */

#ifdef PERL_OBJECT
static SV *_ptrvalue(CPerlObj *pPerl,SV *_PTRVALUE, int index, char *type) {
#define ptrvalue(a,b,c) _ptrvalue(pPerl,a,b,c)
#else
static SV *_ptrvalue(SV *_PTRVALUE, int index, char *type) {
#define ptrvalue(a,b,c) _ptrvalue(a,b,c)
#endif

  void     *ptr;
  SV       *obj = 0;

  if (alaqil_ConvertPtr(_PTRVALUE, &amp;ptr, 0) &amp;lt; 0) {
    croak("Type error it ptrvalue. Argument is not a valid pointer value.");
  } else {
    /* If no datatype was passed, try a few common datatypes first */
    if (!type) {

      /* No datatype was passed.   Type to figure out if it's a common one */

      if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_int_p) >= 0) {
	type = "int";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_double_p) >= 0) {
	type = "double";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_short_p) >= 0) {
	type = "short";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_long_p) >= 0) {
	type = "long";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_float_p) >= 0) {
	type = "float";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_char_p) >= 0) {
	type = "char";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_char_pp) >= 0) {
	type = "char *";
      } else {
	type = "unknown";
      }
    }

    if (!ptr) {
      croak("Unable to dereference NULL pointer.");
      return 0;
    }

    /* Now we have a datatype.  Try to figure out what to do about it */
    if (strcmp(type,"int") == 0) {
      obj = sv_newmortal();
      sv_setiv(obj,(IV) *(((int *) ptr) + index));
    } else if (strcmp(type,"double") == 0) {
      obj = sv_newmortal();
      sv_setnv(obj,(double) *(((double *) ptr)+index));
    } else if (strcmp(type,"short") == 0) {
      obj = sv_newmortal();
      sv_setiv(obj,(IV) *(((short *) ptr) + index));
    } else if (strcmp(type,"long") == 0) {
      obj = sv_newmortal();
      sv_setiv(obj,(IV) *(((long *) ptr) + index));
    } else if (strcmp(type,"float") == 0) {
      obj = sv_newmortal();
      sv_setnv(obj,(double) *(((float *) ptr)+index));
    } else if (strcmp(type,"char") == 0) {
      obj = sv_newmortal();
      sv_setpv(obj,((char *) ptr)+index);
    } else if (strcmp(type,"char *") == 0) {
      char *c = *(((char **) ptr)+index);
      obj = sv_newmortal();
      if (c)
	sv_setpv(obj,c);
      else
	sv_setpv(obj,"NULL");
    } else {
      croak("Unable to dereference unsupported datatype.");
      obj = 0;
    }
  }
  return obj;
}

/*------------------------------------------------------------------
  ptrcreate(type,value = 0,numelements = 1)

  Attempts to create a new object of given type.  Type must be
  a basic C datatype.  Will not create complex objects.
  ------------------------------------------------------------------ */
#ifdef PERL_OBJECT
static SV *_ptrcreate(CPerlObj *pPerl, char *type, SV *value, int numelements) {
#define ptrcreate(a,b,c) _ptrcreate(pPerl,a,b,c)
#else
static SV *_ptrcreate(char *type, SV *value, int numelements) {
#define ptrcreate(a,b,c) _ptrcreate(a,b,c)
#endif

  void     *ptr;
  SV       *obj;
  int       sz;
  alaqil_type_info *cast = 0;

  /* Check the type string against a variety of possibilities */

  if (strcmp(type,"int") == 0) {
    sz = sizeof(int)*numelements;
    cast = alaqil_POINTER_int_p;
  } else if (strcmp(type,"short") == 0) {
    sz = sizeof(short)*numelements;
    cast = alaqil_POINTER_short_p;
  } else if (strcmp(type,"long") == 0) {
    sz = sizeof(long)*numelements;
    cast = alaqil_POINTER_long_p;
  } else if (strcmp(type,"double") == 0) {
    sz = sizeof(double)*numelements;
    cast = alaqil_POINTER_double_p;
  } else if (strcmp(type,"float") == 0) {
    sz = sizeof(float)*numelements;
    cast = alaqil_POINTER_float_p;
  } else if (strcmp(type,"char") == 0) {
    sz = sizeof(char)*numelements;
    cast = alaqil_POINTER_char_p;
  } else if (strcmp(type,"char *") == 0) {
    sz = sizeof(char *)*(numelements+1);
    cast = alaqil_POINTER_char_pp;
  } else if (strcmp(type,"void") == 0) {
    sz = numelements;
    cast = alaqil_POINTER_void_p;
  } else {
    croak("Unable to create unknown datatype.");
    return 0;
  }

  /* Create the new object */

  ptr = (void *) malloc(sz);
  if (!ptr) {
    croak("Out of memory in ptrcreate.");
    return 0;
  }

  /* Now try to set its default value */

  if (value) {
    if (strcmp(type,"int") == 0) {
      int *ip,i,ivalue;
      ivalue = (int) SvIV(value);
      ip = (int *) ptr;
      for (i = 0; i &amp;lt; numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"short") == 0) {
      short *ip,ivalue;
      int i;
      ivalue = (short) SvIV(value);
      ip = (short *) ptr;
      for (i = 0; i &amp;lt; numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"long") == 0) {
      long *ip,ivalue;
      int i;
      ivalue = (long) SvIV(value);
      ip = (long *) ptr;
      for (i = 0; i &amp;lt; numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"double") == 0) {
      double *ip,ivalue;
      int i;
      ivalue = (double) SvNV(value);
      ip = (double *) ptr;
      for (i = 0; i &amp;lt; numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"float") == 0) {
      float *ip,ivalue;
      int i;
      ivalue = (float) SvNV(value);
      ip = (float *) ptr;
      for (i = 0; i &amp;lt; numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"char") == 0) {
      char *ip,*ivalue;
      ivalue = (char *) SvPV(value,PL_na);
      ip = (char *) ptr;
      strncpy(ip,ivalue,numelements-1);
    } else if (strcmp(type,"char *") == 0) {
      char **ip, *ivalue;
      int  i;
      ivalue = (char *) SvPV(value,PL_na);
      ip = (char **) ptr;
      for (i = 0; i &amp;lt; numelements; i++) {
	if (ivalue) {
	  ip[i] = (char *) malloc(strlen(ivalue)+1);
	  strcpy(ip[i],ivalue);
	} else {
	  ip[i] = 0;
	}
      }
      ip[numelements] = 0;
    }
  }
  /* Create the pointer value */


  obj = sv_newmortal();
  alaqil_MakePtr(obj,ptr,cast);
  return obj;
}

/*------------------------------------------------------------------
  ptrset(ptr,value,index = 0,type = 0)

  Attempts to set the value of a pointer variable.  If type is
  given, we will use that type.  Otherwise, we'll guess the datatype.
  ------------------------------------------------------------------ */

#ifdef PERL_OBJECT
static void _ptrset(CPerlObj *pPerl,SV *_PTRVALUE, SV *value, int index, char *type) {
#define ptrset(a,b,c,d) _ptrset(pPerl,a,b,c,d)
#else
static void _ptrset(SV *_PTRVALUE, SV *value, int index, char *type) {
#define ptrset(a,b,c,d) _ptrset(a,b,c,d)
#endif
  void     *ptr;
  SV       *obj;


  if (alaqil_ConvertPtr(_PTRVALUE, &amp;ptr, 0) &amp;lt; 0) {
    croak("Type error it ptrvalue. Argument is not a valid pointer value.");
  } else {
    /* If no datatype was passed, try a few common datatypes first */
    if (!type) {
      /* No datatype was passed.   Type to figure out if it's a common one */
      if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_int_p) >= 0) {
	type = "int";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_double_p) >= 0) {
	type = "double";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_short_p) >= 0) {
	type = "short";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_long_p) >= 0) {
	type = "long";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_float_p) >= 0) {
	type = "float";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_char_p) >= 0) {
	type = "char";
      } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_char_pp) >= 0) {
	type = "char *";
      } else {
	type = "unknown";
      }
    }
  }
  if (!ptr) {
    croak("Unable to set NULL pointer.");
    return;
  }

  /* Now we have a datatype.  Try to figure out what to do about it */
  if (strcmp(type,"int") == 0) {
    *(((int *) ptr)+index) = (int) SvIV(value);
  } else if (strcmp(type,"double") == 0) {
    *(((double *) ptr)+index) = (double) SvNV(value);
  } else if (strcmp(type,"short") == 0) {
    *(((short *) ptr)+index) = (short) SvIV(value);
  } else if (strcmp(type,"long") == 0) {
    *(((long *) ptr)+index) = (long) SvIV(value);
  } else if (strcmp(type,"float") == 0) {
    *(((float *) ptr)+index) = (float) SvNV(value);
  } else if (strcmp(type,"char") == 0) {
    char *c = SvPV(value,PL_na);
    strcpy(((char *) ptr)+index, c);
  } else if (strcmp(type,"char *") == 0) {
    char *c = SvPV(value,PL_na);
    char **ca = (char **) ptr;
    if (ca[index]) free(ca[index]);
    if (strcmp(c,"NULL") == 0) {
      ca[index] = 0;
    } else {
      ca[index] = (char *) malloc(strlen(c)+1);
      strcpy(ca[index],c);
    }
  } else {
    croak("Unable to set unsupported datatype.");
    return;
  }
}

/*------------------------------------------------------------------
  ptradd(ptr,offset)

  Adds a value to an existing pointer value.  Will do a type-dependent
  add for basic datatypes.  For other datatypes, will do a byte-add.
  ------------------------------------------------------------------ */

#ifdef PERL_OBJECT
static SV *_ptradd(CPerlObj *pPerl, SV *_PTRVALUE, int offset) {
#define ptradd(a,b) _ptradd(pPerl,a,b)
#else
static SV *_ptradd(SV *_PTRVALUE, int offset) {
#define ptradd(a,b) _ptradd(a,b)
#endif

  void *ptr,*junk;
  SV   *obj;
  alaqil_type_info *type;
  char *tname;

  /* Try to handle a few common datatypes first */

  if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_int_p) >= 0) {
    ptr = (void *) (((int *) ptr) + offset);
  } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_double_p) >= 0) {
    ptr = (void *) (((double *) ptr) + offset);
  } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_short_p) >= 0) {
    ptr = (void *) (((short *) ptr) + offset);
  } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_long_p) >= 0) {
    ptr = (void *) (((long *) ptr) + offset);
  } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_float_p) >= 0) {
    ptr = (void *) (((float *) ptr) + offset);
  } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,alaqil_POINTER_char_p) >= 0) {
    ptr = (void *) (((char *) ptr) + offset);
  } else if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,0) >= 0) {
    ptr = (void *) (((char *) ptr) + offset);
  } else {
    croak("Type error in ptradd. Argument is not a valid pointer value.");
    return 0;
  }
  printf("ptradd = %x\n", ptr);
  tname = HvNAME(SvSTASH(SvRV(_PTRVALUE)));
  obj = sv_newmortal();
  sv_setref_pv(obj,tname,ptr);
  return obj;
}

/*------------------------------------------------------------------
  ptrfree(ptr)

  Destroys a pointer value
  ------------------------------------------------------------------ */
#ifdef PERL_OBJECT
void _ptrfree(CPerlObj *pPerl, SV *_PTRVALUE) {
#define ptrfree(a) _ptrfree(pPerl, a)
#else
void _ptrfree(SV *_PTRVALUE) {
#define ptrfree(a) _ptrfree(a)
#endif

  void *ptr, *junk;

  if (alaqil_ConvertPtr(_PTRVALUE,&amp;ptr,0) &amp;lt; 0) {
    croak("Type error in ptrfree. Argument is not a valid pointer value.");
    return;
  }

  /* Check to see if this pointer is a char ** */
  if (alaqil_ConvertPtr(_PTRVALUE,&amp;junk,alaqil_POINTER_char_pp) >= 0) {
    char **c = (char **) ptr;
    if (c) {
      int i = 0;
      while (c[i]) {
	free(c[i]);
	i++;
      }
    }
  }
  if (ptr)
    free((char *) ptr);
}

                    </alaqilxml:code>
                  </alaqil:insert>
                  <alaqil:typemap name="ptr" >
                    <alaqilxml:code >
{
  $target = $source;
}                    </alaqilxml:code>
                    <alaqilxml:method string="in"  />
                    <alaqilxml:type string="p.SV"  />
                    <alaqilxml:lang string="perl5"  />
                  </alaqil:typemap>
                  <alaqil:typemap name="value" >
                    <alaqilxml:code >
{
  $target = $source;
}                    </alaqilxml:code>
                    <alaqilxml:method string="in"  />
                    <alaqilxml:type string="p.SV"  />
                    <alaqilxml:lang string="perl5"  />
                  </alaqil:typemap>
                  <alaqil:typemap name="ptrcast" >
                    <alaqilxml:code >
{
  $target = $source;
  argvi++;
}                    </alaqilxml:code>
                    <alaqilxml:method string="out"  />
                    <alaqilxml:type string="p.SV"  />
                    <alaqilxml:lang string="perl5"  />
                  </alaqil:typemap>
                  <alaqil:typemap name="ptrvalue" >
                    <alaqilxml:code >
{
  $target = $source;
  argvi++;
}                    </alaqilxml:code>
                    <alaqilxml:method string="out"  />
                    <alaqilxml:type string="p.SV"  />
                    <alaqilxml:lang string="perl5"  />
                  </alaqil:typemap>
                  <alaqil:typemap name="ptrcreate" >
                    <alaqilxml:code >
{
  $target = $source;
  argvi++;
}                    </alaqilxml:code>
                    <alaqilxml:method string="out"  />
                    <alaqilxml:type string="p.SV"  />
                    <alaqilxml:lang string="perl5"  />
                  </alaqil:typemap>
                  <alaqil:typemap name="ptradd" >
                    <alaqilxml:code >
{
  $target = $source;
  argvi++;
}                    </alaqilxml:code>
                    <alaqilxml:method string="out"  />
                    <alaqilxml:type string="p.SV"  />
                    <alaqilxml:lang string="perl5"  />
                  </alaqil:typemap>
                  <alaqil:typemap name="ptrset" >
                    <alaqilxml:code >
{
  if ($source == -1) return NULL;
}                    </alaqilxml:code>
                    <alaqilxml:method string="ret"  />
                    <alaqilxml:type string="int"  />
                    <alaqilxml:lang string="perl5"  />
                  </alaqil:typemap>
                  <c:function name="ptrvalue" >
                    <alaqilxml:parms >
                      <alaqilxml:parm name="ptr" >
                        <alaqilxml:type string="p.SV"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="index" >
                        <alaqilxml:value string="0"  />
                        <alaqilxml:type string="int"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="type" >
                        <alaqilxml:value string="0"  />
                        <alaqilxml:type string="p.char"  />
                      </alaqilxml:parm>
                    </alaqilxml:parms>
                    <alaqilxml:type string="p.SV"  />
                  </c:function>
                  <c:function name="ptrset" >
                    <alaqilxml:parms >
                      <alaqilxml:parm name="ptr" >
                        <alaqilxml:type string="p.SV"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="value" >
                        <alaqilxml:type string="p.SV"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="index" >
                        <alaqilxml:value string="0"  />
                        <alaqilxml:type string="int"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="type" >
                        <alaqilxml:value string="0"  />
                        <alaqilxml:type string="p.char"  />
                      </alaqilxml:parm>
                    </alaqilxml:parms>
                    <alaqilxml:type string="void"  />
                  </c:function>
                  <c:function name="ptrcreate" >
                    <alaqilxml:parms >
                      <alaqilxml:parm name="type" >
                        <alaqilxml:type string="p.char"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="value" >
                        <alaqilxml:value string="0"  />
                        <alaqilxml:type string="p.SV"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="nitems" >
                        <alaqilxml:value string="1"  />
                        <alaqilxml:type string="int"  />
                      </alaqilxml:parm>
                    </alaqilxml:parms>
                    <alaqilxml:type string="p.SV"  />
                  </c:function>
                  <c:function name="ptrfree" >
                    <alaqilxml:parms >
                      <alaqilxml:parm name="ptr" >
                        <alaqilxml:type string="p.SV"  />
                      </alaqilxml:parm>
                    </alaqilxml:parms>
                    <alaqilxml:type string="void"  />
                  </c:function>
                  <c:function name="ptradd" >
                    <alaqilxml:parms >
                      <alaqilxml:parm name="ptr" >
                        <alaqilxml:type string="p.SV"  />
                      </alaqilxml:parm>
                      <alaqilxml:parm name="offset" >
                        <alaqilxml:type string="int"  />
                      </alaqilxml:parm>
                    </alaqilxml:parms>
                    <alaqilxml:type string="p.SV"  />
                  </c:function>
                </alaqilxml:child>
                <alaqilxml:type string="include"  />
              </alaqil:file>
            </alaqilxml:child>
            <alaqilxml:type string="include"  />
          </alaqil:file>
          <alaqil:file name="../../Lib/xml/typemaps.i" >
            <alaqilxml:child >
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="double"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (double) SvNV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.double"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="float"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (float) SvNV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.float"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="int"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (int) SvIV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="short"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (short) SvIV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="long"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (long) SvIV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned int"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (unsigned int) SvIV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned short"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (unsigned short) SvIV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned long"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (unsigned long) SvIV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="INPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned char"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  temp = (unsigned char) SvIV($source);
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned char"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="int"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="short"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="long"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned int"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.unsigned int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned short"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;amp;amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.unsigned short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned long"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;amp;amp;amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.unsigned long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="unsigned char"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;amp;amp;amp;amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.unsigned char"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="float"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;amp;amp;amp;amp;amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.float"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="temp" >
                    <alaqilxml:type string="double"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  $target = &amp;amp;amp;amp;amp;amp;amp;amp;amp;temp;
}                </alaqilxml:code>
                <alaqilxml:method string="ignore"  />
                <alaqilxml:type string="p.double"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setiv($target,(IV) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setiv($target,(IV) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setiv($target,(IV) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setiv($target,(IV) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setiv($target,(IV) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setiv($target,(IV) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setiv($target,(IV) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned char"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setnv($target,(double) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.float"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="OUTPUT" >
                <alaqilxml:code >
{
  if (argvi >= items) {
    EXTEND(sp,1);
  }
  $target = sv_newmortal();
  sv_setnv($target,(double) *($source));
  argvi++;
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.double"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.int"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.int"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.short"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.short"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.long"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.long"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned short"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned short"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned long"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned long"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned char"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned char"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.float"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.float"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.double"  />
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.double"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="INPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.int"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.int"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.short"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.short"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.long"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.long"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned short"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned short"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned long"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned long"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.unsigned char"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned char"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.float"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.float"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="BOTH" >
                <alaqilxml:srctype string="p.double"  />
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.double"  />
                <alaqilxml:lang string="perl5"  />
                <alaqilxml:srcname string="OUTPUT"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="double"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if ((!SvNOK(tempsv)) &amp;&amp; (!SvIOK(tempsv))) {
	printf("Received %d\n", SvTYPE(tempsv));
	croak("Expected a double reference.");
  }
  dvalue = SvNV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.double"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="float"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if ((!SvNOK(tempsv)) &amp;&amp; (!SvIOK(tempsv))) {
    croak("expected a double reference");
  }
  dvalue = (float) SvNV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.float"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="int"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if (!SvIOK(tempsv)) {
    croak("expected an integer reference");
  }
  dvalue = SvIV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="short"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if (!SvIOK(tempsv)) {
    croak("expected an integer reference");
  }
  dvalue = (short) SvIV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="long"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if (!SvIOK(tempsv)) {
    croak("expected an integer reference");
  }
  dvalue = (long) SvIV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="unsigned int"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if (!SvIOK(tempsv)) {
    croak("expected an integer reference");
  }
  dvalue = (unsigned int) SvIV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="unsigned short"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if (!SvIOK(tempsv)) {
    croak("expected an integer reference");
  }
  dvalue = (unsigned short) SvIV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="dvalue" >
                    <alaqilxml:type string="unsigned long"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:code >
{
  SV *tempsv;
  if (!SvROK($source)) {
    croak("expected a reference");
  }
  tempsv = SvRV($source);
  if (!SvIOK(tempsv)) {
    croak("expected an integer reference");
  }
  dvalue = (unsigned long) SvIV(tempsv);
  $target = &amp;dvalue;
}                </alaqilxml:code>
                <alaqilxml:method string="in"  />
                <alaqilxml:type string="p.unsigned long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setnv(tempsv, (double) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.double"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setnv(tempsv, (double) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.float"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setiv(tempsv, (int) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setiv(tempsv, (int) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setiv(tempsv, (int) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setiv(tempsv, (int) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned int"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setiv(tempsv, (int) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned short"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
              <alaqil:typemap name="REFERENCE" >
                <alaqilxml:code >
{
  SV *tempsv;
  tempsv = SvRV($arg);
  sv_setiv(tempsv, (int) *$source);
}                </alaqilxml:code>
                <alaqilxml:method string="argout"  />
                <alaqilxml:type string="p.unsigned long"  />
                <alaqilxml:lang string="perl5"  />
              </alaqil:typemap>
            </alaqilxml:child>
            <alaqilxml:type string="include"  />
          </alaqil:file>
          <alaqil:typemap >
            <alaqilxml:code >
{
    WHATEVER  MAKES YOU HAPPY AS RESULT
}            </alaqilxml:code>
            <alaqilxml:method string="out"  />
            <alaqilxml:type string="p.int"  />
          </alaqil:typemap>
          <alaqil:typemap >
            <alaqilxml:code >
{
    WHATEVER  MAKES YOU HAPPY AS PARAMETER
}            </alaqilxml:code>
            <alaqilxml:method string="in"  />
            <alaqilxml:type string="p.int"  />
          </alaqil:typemap>
          <alaqil:pragma name="DEBUG" >
            <alaqilxml:value string="false"  />
            <alaqilxml:lang string="xml"  />
          </alaqil:pragma>
          <c:function name="my_gcd" >
            <alaqilxml:parms >
              <alaqilxml:parm name="x" >
                <alaqilxml:type string="p.q(const).char"  />
              </alaqilxml:parm>
              <alaqilxml:parm name="y" >
                <alaqilxml:type string="a().p.int"  />
              </alaqilxml:parm>
              <alaqilxml:parm name="r" >
                <alaqilxml:type string="p.int"  />
              </alaqilxml:parm>
              <alaqilxml:parm name="op" >
                <alaqilxml:type string="p.f(int,int).int"  />
              </alaqilxml:parm>
            </alaqilxml:parms>
            <alaqilxml:storage string="extern"  />
            <alaqilxml:type string="p.int"  />
          </c:function>
          <c:variable name="my_foo" >
            <alaqilxml:storage string="extern"  />
            <alaqilxml:type string="double"  />
          </c:variable>
          <c:function name="my_void" >
            <alaqilxml:type string="void"  />
          </c:function>
          <c:function name="my_empty" >
            <alaqilxml:type string="int"  />
          </c:function>
          <c:variable name="my_dutch" >
            <alaqilxml:value string="1.0"  />
            <alaqilxml:type string="q(const).double"  />
          </c:variable>
          <c:class name="my_union" >
            <alaqilxml:child >
              <c:variable name="my_iii" >
                <alaqilxml:type string="int"  />
              </c:variable>
              <c:variable name="my_ccc" >
                <alaqilxml:type string="char"  />
              </c:variable>
            </alaqilxml:child>
            <alaqilxml:classtype string="union"  />
            <alaqilxml:namespace string="my_union"  />
          </c:class>
          <c:class name="my_struct" >
            <alaqilxml:child >
              <c:access name="public"  />
              <c:destructor name="my_struct" >
                <alaqilxml:storage string="virtual"  />
              </c:destructor>
              <c:function name="my_foo" >
                <alaqilxml:type string="int"  />
              </c:function>
              <c:access name="protected"  />
              <c:variable name="my_bar" >
                <alaqilxml:type string="int"  />
              </c:variable>
              <c:variable name="x" >
                <alaqilxml:type string="double"  />
              </c:variable>
              <c:variable name="y" >
                <alaqilxml:type string="double"  />
              </c:variable>
              <c:function name="area" >
                <alaqilxml:abstract string="1"  />
                <alaqilxml:storage string="virtual"  />
                <alaqilxml:type string="double"  />
              </c:function>
              <c:variable name="nshapes" >
                <alaqilxml:storage string="static"  />
                <alaqilxml:type string="int"  />
              </c:variable>
            </alaqilxml:child>
            <alaqilxml:classtype string="struct"  />
            <alaqilxml:namespace string="my_struct"  />
          </c:class>
          <c:class name="my_class" >
            <alaqilxml:child >
              <c:access name="public"  />
              <c:function name="my_class" >
                <alaqilxml:parms >
                  <alaqilxml:parm name="c" >
                    <alaqilxml:type string="char"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:type string="int"  />
              </c:function>
              <c:access name="private"  />
              <c:destructor name="my_class"  />
              <c:function name="my_func" >
                <alaqilxml:parms >
                  <alaqilxml:parm >
                    <alaqilxml:type string="my_class"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm name="x" >
                    <alaqilxml:type string="p.p.char"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm name="y" >
                    <alaqilxml:type string="a().int"  />
                  </alaqilxml:parm>
                  <alaqilxml:parm name="r" >
                    <alaqilxml:type string="r.q(const).int"  />
                  </alaqilxml:parm>
                </alaqilxml:parms>
                <alaqilxml:storage string="virtual"  />
                <alaqilxml:type string="p.q(const).int"  />
              </c:function>
              <c:variable name="my_foo" >
                <alaqilxml:type string="a(128).double"  />
              </c:variable>
              <c:variable name="i" >
                <alaqilxml:type string="q(const).my_int"  />
              </c:variable>
            </alaqilxml:child>
            <alaqilxml:classtype string="class"  />
            <alaqilxml:bases >
                <alaqilxml:item name="my_struct"  />
                <alaqilxml:item name="my_union"  />
            </alaqilxml:bases>
            <alaqilxml:namespace string="my_class"  />
          </c:class>
          <c:typedef name="my_int" >
            <alaqilxml:type string="int"  />
          </c:typedef>
        </alaqilxml:child>
        <alaqilxml:type string="include"  />
      </alaqil:file>
    </alaqilxml:child>
  </alaqil:top>
</alaqilxml:alaqil>
